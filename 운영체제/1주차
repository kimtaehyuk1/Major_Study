소프트웨어 구조에 대해 (그림을 그릴수 없으니 간단히 말로 써보면)

맨 밑에 하드웨어
그 위에 운영체제,라이브러리(미들웨어),응용프로그램 순으로 구성되어 있다.
자세히 보면

운영체제는 소프트웨어로서(프로그램) 리눅스,윈도우 같은 것이있고 여기는 넓은 의미와 좁은 의미가 있는데
넓은 의미로선 app과 하드웨어를 제외한 것을 운영체제 라고 하며, 좁은 의미(우리가 중점두고 배우는)는 하드웨어(cpu,io,mm)를 제어하는 커널만을 뜻하는 것이다.
또 운영체제 안에 driver라는 i/o장치 제어하는 것들이 포함되어 있다.
그 위에 라이브러리는 미들웨어가 있다고 했는데 이것은 크게 Application Framework와 System Libraries, Android Runtime(java VM이 있다.)이 있다.

운영체제가 예를들어 핸드폰안에있는 하드웨어적 코어를 어떻게 동작시킬까 하는 일에 관여(즉 하드웨어 조종)

API(Application programming interface) : 남이 짜논 라이브러리 같은거(그 전단계꺼) 갖다 쓰는거(즉 라이브러리 갖다쓰는거,여기서 프로그래밍 언어도 라이브러리다)
ABI(Application binary interface) : 운영체제의 api라고도 불린다. os를 갖다 쓰는거
ISA(Instruction Set Architecture) : 이건 하드웨어의 기계어,어셈블리어 같은걸로 os를 제어 즉 하드웨어적인걸 갖다 쓰 



계층구조가 바로 나눠진 3단계층이아니라 계단 모양처럼 되있는것은 예를들어 아두이노(얜 os가 없다) 마냥 앱에서 바로 
하드웨어를 통제할 수 있게 하고(그 전단계 꺼들 통제가능)이어서 모양은 계단모양

OS
1.프로그램 수행시키는 능력(프로그램이 진짜 돌아가는 것을 스케쥴링 한다.)
2. I/O 장치에 접근한다.(윈도우가 키보드,소리 통제[하드웨어 접근] I/O device 제어는 드라이버가 한다.)
3. 파일에 접근한다. (파일시스템)
4. System access 한다. 즉 하드웨어(씨피유,아이오디바이스,메인메모리)조작
5. 에러 감지 및 응답
6.개인화 개인계정(윈도우)

#운영체제의 발전
운영체제의 필요성 장,단점 요구사항

*Serial Processing (운영체제 없는거)
아두이노, 운영체제없이 기계가 어떤 간단한 프로그램 돌리고 끝나는거 간단하게 불키고 스위치 이런것들

*Simple Batch System (여러가지일 동시에 시키고 싶다)
초기 컴퓨터가 비싸서 프로세서가 노는게 아까워서 여러개 동시에 돌리기 원했다.
모니터(이놈이 원시적 최조 운영체제임 cmd같은거 즉 SW)
응용프로그램은 아니지만 컴퓨터 사용량 높이기 위해 다른거 넣었다(내부적으로 어떻게 돌아가는지 볼라고, 쉬는지 마는지)

또 모니터는 항상 메인메모리에 항사 거주한다. 어플리케이션 죽어도 얜 응답해야된다.
일 끝나고 나면 프롬프트(깜빡깜빡 거리고 있다)

OS의 mode
User mode : 약한거, 앱이 시스템 장악못하게 유저가 건들리면 안되는 영역이있다
Kernel mode : 강한모드(모니터), 하드웨어쪽 건드리는건 다 이 커널모드에서 돌릴수 있고 모든 메모리부분 접근가능하다.

*Multi-programmed Batch System (프로그램 여러갠거)
이게 젤중요 위처럼 모니터만 있는게 아니라 여러 프로그램이 깔려서 같이 돌아가는 경우임
cpu가 종종 논다.

프린트 그림 꼭 

*Time Sharing System


















